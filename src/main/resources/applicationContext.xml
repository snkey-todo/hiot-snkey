<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

    <!-- 开启组件扫描 -->
    <context:component-scan base-package="com.snkey.core"/>

    <!-- 配置视图解析器ViewResolver，负责将视图名解析成具体的视图技术，比如解析成html、jsp等 -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 前缀属性 -->
        <property name="prefix" value="/"/>
        <!-- 后缀属性 -->
        <property name="suffix" value=""/>
    </bean>

    <!-- 配置数据库连接信息 -->
    <util:properties id="jdbc" location="classpath:jdbc.properties"/>

    <bean id="dbcp" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="#{jdbc.driver}"/>
        <property name="url" value="#{jdbc.url}"/>
        <property name="username" value="#{jdbc.username}"/>
        <property name="password" value="#{jdbc.password}"/>
        <!--initialSize: 连接池初始值-->
        <property name="initialSize" value="#{jdbc.initialSize}"/>
        <!--maxIdle: 连接池最大空闲连接-->
        <property name="maxIdle" value="#{jdbc.maxIdle}"/>
        <!--minIdle: 连接池最小空闲连接-->
        <property name="minIdle" value="#{jdbc.minIdle}"/>
        <!--maxActive: 连接池最大连接数量-->
        <property name="maxActive" value="#{jdbc.maxActive}"/>
        <!--maxWait: 连接池最大连接数量-->
        <property name="maxWait" value="#{jdbc.maxWait}"/>
        <!--SQL查询,用来验证从连接池取出的连接-->
        <property name="validationQuery" value="#{jdbc.validationQuery}"/>
        <!--指明连接是否被空闲连接回收器(如果有)进行检验，如果检测失败，则连接将被从池中去除-->
        <property name="testWhileIdle" value="#{jdbc.testWhileIdle}"/>
        <!--在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位，一般比minEvictableIdleTimeMillis小-->
        <property name="timeBetweenEvictionRunsMillis" value="#{jdbc.timeBetweenEvictionRunsMillis}"/>
        <!--在每次空闲连接回收器线程(如果有)运行时检查的连接数量，最好和maxActive一致-->
        <property name="numTestsPerEvictionRun" value="#{jdbc.numTestsPerEvictionRun}"/>
        <!--连接池中连接，在时间段内一直空闲，被逐出连接池的时间(1000*60*60)，以毫秒为单位-->
        <property name="minEvictableIdleTimeMillis" value="#{jdbc.minEvictableIdleTimeMillis}"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="ssf" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源，注入连接信息 -->
        <property name="dataSource" ref="dbcp"/>
        <!-- 用于指定sql定义文件的位置(加classpath从src下找),自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath*:sqlmapper/*.xml"/>
        <!-- 扫描 entity 包，这样在 mapper 中就可以使用简单类名，多个用 , 隔开 -->
        <property name="typeAliasesPackage" value="com.snkey.core.entity"/>
    </bean>

    <!-- 按指定包扫描dao接口，批量生成dao接口实现对象，id为接口名首字母小写，自动注入Dao实现类，无须手动实现 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.snkey.core.dao"/>
        <property name="sqlSessionFactoryBeanName" value="ssf"/>
    </bean>

    <!--带有@Transactional标记的方法会调用transactionManager组件追加事务控制-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dbcp"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置redis，缓存token-->
    <bean id="propertyConfigurerRedis" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:redis-config.properties</value>
            </list>
        </property>
    </bean>
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="minIdle" value="${redis.minIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"></property>
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.pass}"/>
        <property name="timeout" value="${redis.timeout}"/>
        <property name="database" value="${redis.default.db}"/>
        <constructor-arg index="0" ref="jedisPoolConfig"/>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>
</beans>
